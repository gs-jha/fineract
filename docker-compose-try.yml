# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
#

# You can replace and test a more recent version of docker compose
version: '3.7'
services:
  fineract-server:
    build:
      context: .
      dockerfile: Dockerfile
      # args:
      #   - GRADLE_USER_HOME=/gradle-cache
    # image: fineract:latest
    #volumes:
    #  - ./docfin:/fineracts
      #- ./pentahoReports:/data/pentahoReports
      #- ./fineract-provider/build/libs:$HOME
      #- ./app/plugins:/app/plugins
    healthcheck:
      test: ["CMD", 'sh', '-c', 'echo -e "Checking for the availability of Fineract server deployment"; while ! nc -z "fineract-server" 8443; do sleep 1; printf "-"; done; echo -e " >> Fineract server has started";' ]
      timeout: 10s
      retries: 10
    container_name: fineract-server
    env_file:
      - .env
    # expose:
    #   - "8443"
    # ports:
    #   - 8443:8443
    labels:
      - "traefik.enable=true"
      # Define the network that should be used
      - "traefik.docker.network=proxy"
      # Entrypoint
      - "traefik.http.routers.fineract-server.entrypoints=http"
      # URL to reach this container
      - "traefik.http.routers.fineract-server.rule=Host(`lmsapi.gyandhan.localhost`)"
      # Activation of TLS
      # - "traefik.http.routers.fineract-server.tls=true"
      # If port is different than 80, use the following service:
      #- "traefik.http.services.fineract-server.loadbalancer.server.port=8443"
      # Add scheme if required
      #- "traefik.http.services.fineract-server.loadbalancer.server.scheme=https"
    networks:
      - proxy
#     volumes:
#       - gradle-cache:/gradle-cache

# volumes:
#   gradle-cache:

networks:
  default:
    external:
      name: docker-fineract_default
  proxy:
    external: true

## https://community.traefik.io/t/misunderstood-behaviour-of-traefik-rule-host/5645/11
